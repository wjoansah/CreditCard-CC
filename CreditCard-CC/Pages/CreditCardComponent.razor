@using System.Text.RegularExpressions;
@using CreditCard_CC.Models
@inject CreditCard_CC_Context dbContext;
@inject NavigationManager navigationManager;

<div class="credit-card text-white h-64 w-[35%] -mb-16 group [perspective:3000px]">
    <div class="card-inner relative h-full w-full rounded-xl shadow-xl transisition-all duration-500 [transform-style:preserve-3d] [backface-visibility:hidden]  @(cardCvvInputInFocus ? "[transform:rotateY(180deg)]": "")">
        <div class="credit-card-front absolute inset-0 h-full w-full rounded-lg shadow-lg bg-cover bg-[url(/images/background.jpg)] px-3 py-10 flex flex-col gap-2 justify-between">
            <div class="flex justify-between">
                <div class="w-12">
                    <img src="/images/sticker.png" />
                </div>
                <div class="w-16 h-12 @(issuerLogo.Contains("discover") ? "w-16": "")">
                    <img class="object-cover" src=@issuerLogo />
                </div>

            </div>
            <div class="@(cardNumberInputInFocus ? "border border-white-100 ": "" ) transition-all duration-300 rounded-lg p-2 text-white h-12 flex items-center">
                <p>@creditCard.Number</p>
                @*<div class="flex items-center justify-around">
                <div class="flex ">
                @foreach (var num in cardNumber.Substring(0, 4))
                {
                <span>@num</span>
                }
                </div>

                <div>
                @foreach (var num in cardNumber.Substring(4, 4))
                {
                <span>@num</span>
                }
                </div>

                <div>
                @foreach (var num in cardNumber.Substring(8, 4))
                {
                <span>@num</span>
                }
                </div>

                <div>
                @foreach (var num in cardNumber.Substring(12))
                {
                <span>@num</span>
                }
                </div>
                </div> *@
            </div>
            <div class="flex justify-between gap-2">
                <div class="@(cardHolderInputInFocus ? "border border-white": "") transition-all duration-300 p-2 flex-1 rounded-lg">
                    <p class="text-xs text-normal opacity-50">Card Holder</p>
                    <p class="uppercase text-sm max-w-[213px] overflow-hidden">@creditCard.Holder</p>
                </div>

                <div class="@(expiresMonthInFocus || expiresYearInFocus ? "border border-white" : "") transition-all duration-300 p-2 rounded-lg">
                    <p class="text-xs opacity-50">Expires</p>
                    <p class="text-sm">@expiresMonth / @expiresYear</p>
                </div>
            </div>
        </div>

        <div class="credit-card-back absolute inset-0 h-full w-full [transform:rotateY(180deg)] [backface-visibility:hidden] rounded-lg shadow-lg bg-cover bg-[url(/images/background.jpg)] px-3 py-10 flex flex-col gap-3 ">
            <div class=" black bg-black px-2 py-3">
            </div>
            <div class="input">
                <p class="text-right text-xs pr-2">CVV</p>
                <p class="text-right p-2 text-xs h-8 bg-white text-black">@creditCard.CVV</p>
            </div>

            <div class="self-end">
                <img class="w-10" src=@issuerLogo />
            </div>
        </div>
    </div>

</div>

<div class="wrapper px-8 py-8 bg-white rounded-lg">
    <EditForm Model="creditCard" OnValidSubmit="SubmitCardAsync" class="pt-16 ">
        <DataAnnotationsValidator />
        <div class="flex flex-col gap-4">
            <div class="card-number flex flex-col ">
                <label for="card-number">Card Number</label>
                <InputText @bind-Value="creditCard.Number" @oninput="OnCardNumberInput" @onfocusin="ToggleCardNumberFocus" @onfocusout="ToggleCardNumberFocus" class="border border-black-600 p-2 focus:outline-blue-400/50 focus:shadow-lg" @attributes="CardNumberInputAttrs" />
                <ValidationMessage class="text-xs text-[color:red]" For="@(() =>  creditCard.Number)" />
            </div>

            <div class="card-holder flex flex-col">
                <label for="card-holder">Card Holder</label>
                <InputText @bind-Value="creditCard.Holder" @onfocusin="ToggleHolderFocus" @onfocusout="ToggleHolderFocus" @oninput="@((e) => creditCard.Holder = e.Value.ToString())" class="border border-black-600 p-2 focus:outline-blue-400/50 focus:shadow-lg" @attributes="CardHolderInputAttrs" />
                <ValidationMessage class="text-xs text-[color:red]" For="@(() =>  creditCard.Holder)" />
            </div>

            <div class="card-expires flex items-center gap-2 justify-between">
                <div class="flex-1">
                    <legend class="text-sm">Expiration Date</legend>
                    <select @onchange="MonthSelectionChanged" @onfocusin="ToggleMonthFocus" @onfocusout="ToggleMonthFocus" class="p-2 border border-black-600  focus:outline-blue-300 focus:shadow-lg">
                        <option value="MM" disabled selected>Month</option>
                        @foreach (var month in GetMonths())
                        {
                            <option value="@month">@month</option>
                        }
                    </select>
                    <select @onchange="YearSelectionChanged" @onfocusin="ToggleYearFocus" @onfocusout="ToggleYearFocus" class="p-2 border border-black-600  focus:outline-blue-300 focus:shadow-lg">
                        <option value="YY" disabled selected>Year</option>
                        @foreach (string year in GetYears())
                        {
                            <option value="@year.Substring(2, 2)">@year</option>
                        }
                    </select>
                </div>
                <div class="flex flex-col">
                    <legend class="text-sm">CVV</legend>
                    <InputText @bind-Value="creditCard.CVV" @onfocusin="ToggleCVVFocus" @onfocusout="ToggleCVVFocus" @oninput="@((e) => creditCard.CVV = e.Value.ToString())" class="border border-black-600 p-2 focus:outline-blue-400/50 focus:shadow-lg" @attributes="CardCVVInputAttrs" />
                    <ValidationMessage class="text-xs text-[color:red]" For="@(() =>  creditCard.CVV)" />
                </div>
            </div>

            <button type="submit" class="bg-blue-500 p-2 rounded-lg text-white hover:bg-blue-600 focus:outline-blue-500">
                Submit
            </button>
        </div>

    </EditForm>
</div>



@code {
    private string cardNumber = "#### #### #### ####";
    private string expiresMonth = "MM";
    private string expiresYear = "YY";
    private string issuerLogo = "/images/visa.png";
    private CreditCard creditCard = new();

    private bool cardNumberInputInFocus = false;
    private bool cardHolderInputInFocus = false;
    private bool cardCvvInputInFocus = false;
    private bool expiresMonthInFocus = false;
    private bool expiresYearInFocus = false;


    private Dictionary<string, object> CardNumberInputAttrs = new()
    {
     {"maxlength", "19"}      ,
    };

    private Dictionary<string, object> CardHolderInputAttrs = new()
    {
  {"maxlength", "50"}      ,
    };

    private Dictionary<string, object> CardCVVInputAttrs = new()
    {
  {"maxlength", "4"}      ,
    };

    private void ToggleCVVFocus(FocusEventArgs e) => cardCvvInputInFocus = !cardCvvInputInFocus;
    private void ToggleCardNumberFocus(FocusEventArgs e) => cardNumberInputInFocus = !cardNumberInputInFocus;
    private void ToggleHolderFocus(FocusEventArgs e) => cardHolderInputInFocus = !cardHolderInputInFocus;
    private void ToggleMonthFocus(FocusEventArgs e) => expiresMonthInFocus = !expiresMonthInFocus;
    private void ToggleYearFocus(FocusEventArgs e) => expiresYearInFocus = !expiresYearInFocus;

    private void YearSelectionChanged(ChangeEventArgs e) => expiresYear = e.Value.ToString();
    private void MonthSelectionChanged(ChangeEventArgs e) => expiresMonth = e.Value.ToString();

    private void OnCardNumberInput(ChangeEventArgs e)
    {
        CheckIssuer(e);
        creditCard.Number = new string(e.Value.ToString().Where(char.IsDigit).ToArray());
        if (creditCard.Number.Length > 16)
        {
            creditCard.Number = creditCard.Number.Substring(0, 16);
        }
        if (creditCard.Number.Length > 4 && creditCard.Number.Length <= 8)
        {
            creditCard.Number = string.Format("{0} {1}", creditCard.Number.Substring(0, 4), creditCard.Number.Substring(4));
        }
        if (creditCard.Number.Length > 8 && creditCard.Number.Length <= 12)
        {
            creditCard.Number = string.Format("{0} {1} {2}", creditCard.Number.Substring(0, 4), creditCard.Number.Substring(4, 4), creditCard.Number.Substring(8));
        }
        if (creditCard.Number.Length > 12 && creditCard.Number.Length <= 16)
        {
            creditCard.Number = string.Format("{0} {1} {2} {3}", creditCard.Number.Substring(0, 4), creditCard.Number.Substring(4, 4), creditCard.Number.Substring(8, 4), creditCard.Number.Substring(12));
        }
    }

    private void CheckIssuer(ChangeEventArgs e)
    {
        var visaRegex = new Regex(@"^4");
        var masterCardRegex = new Regex(@"^(51|55)");
        var discoverRegex = new Regex(@"^(65|6011)");
        var currentCardNumber = e.Value.ToString();

        if (visaRegex.IsMatch(currentCardNumber))
            issuerLogo = "/images/visa.png";
        else if (masterCardRegex.IsMatch(currentCardNumber))
            issuerLogo = "/images/mastercard.png";

        else if (discoverRegex.IsMatch(currentCardNumber))
            issuerLogo = "/images/discover.png";
        else
            issuerLogo = "/images/visa.png";
        StateHasChanged();
    }

    private List<string> GetMonths()
    {
        var months = new List<string>();

        for (int i = 0; i < 12; ++i)
        {
            if (i < 9)
                months.Add($"0{i + 1}");
            else
                months.Add($"{i + 1}");
        }
        return months;
    }

    private List<string> GetYears()
    {
        const int numberOfYears = 10; // Change this as needed
        int currentYear = DateTime.Now.Year;

        var yearsList = new List<string>();
        for (int i = 0; i < numberOfYears; i++)
            yearsList.Add((currentYear + i).ToString());

        return yearsList;
    }

    private void ClearFields()
    {
        cardNumber = "#### #### #### ####";
        creditCard.Holder = "";
        expiresMonth = "MM";
        expiresYear = "YY";
        creditCard.CVV = "";
    }

    private void ResetCard()
    {
        creditCard.Number = "";
        creditCard.CVV = "";
        creditCard.Holder = "";
        creditCard.Expires = "";
    }


    private async void SubmitCardAsync()
    {
        creditCard.Number = creditCard.Number.Replace(" ", "");
        creditCard.CVV = creditCard.CVV;
        creditCard.Expires = $"{expiresMonth}/{expiresYear}";
        creditCard.Holder = creditCard.Holder.Trim();

        await dbContext.AddAsync(creditCard);
        await dbContext.SaveChangesAsync();
        ClearFields();
        ResetCard();
        StateHasChanged();
        navigationManager.NavigateTo("/cards", true);
    }

}
